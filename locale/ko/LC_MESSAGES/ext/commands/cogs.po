# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2020, Rapptz
# This file is distributed under the same license as the discord.py package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: discord.py 1.4.0a\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-27 13:27+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../ext/commands/cogs.rst:6
msgid "Cogs"
msgstr ""

#: ../../ext/commands/cogs.rst:8
msgid ""
"There comes a point in your bot's development when you want to organize a"
" collection of commands, listeners, and some state into one class. Cogs "
"allow you to do just that."
msgstr "봇의 개발 중 명령어들의 모음, 리스너, 그리고 몇몇 state들을 한 클래스에"
" 조직화하고 싶을 때가 옵니다. Cogs는 그것을 할 수 있게 해줍니다."

#: ../../ext/commands/cogs.rst:10
msgid "The gist:"
msgstr "요점:"

#: ../../ext/commands/cogs.rst:12
msgid "Each cog is a Python class that subclasses :class:`.commands.Cog`."
msgstr "각각의 cog는 :class:`.commands.Cog` 의 서브클래스인 Python 클래스입니다."

#: ../../ext/commands/cogs.rst:13
msgid "Every command is marked with the :func:`.commands.command` decorator."
msgstr "모든 명령어들은 :func:`.commands.command` 데코레이터로 표시됩니다."

#: ../../ext/commands/cogs.rst:14
msgid ""
"Every listener is marked with the :meth:`.commands.Cog.listener` "
"decorator."
msgstr "모든 리스너들은 :meth:`.commands.Cog.listener` 로 표시됩니다."

#: ../../ext/commands/cogs.rst:15
msgid "Cogs are then registered with the :meth:`.Bot.add_cog` call."
msgstr "Cogs는 :meth:`.Bot.add_cog` 호출로 등록됩니다."

#: ../../ext/commands/cogs.rst:16
msgid "Cogs are subsequently removed with the :meth:`.Bot.remove_cog` call."
msgstr "Cogs는 :meth:`.Bot.remove_cog` 호출로 제거됩니다."

#: ../../ext/commands/cogs.rst:18
msgid ""
"It should be noted that cogs are typically used alongside with "
":ref:`ext_commands_extensions`."
msgstr "일반적으로 cogs가 :ref:`ext_commands_extensions` 와 함께 "
"사용된다는 점을 참고해야 합니다."
#: ../../ext/commands/cogs.rst:21
msgid "Quick Example"
msgstr "간단한 예제"

#: ../../ext/commands/cogs.rst:23
msgid ""
"This example cog defines a ``Greetings`` category for your commands, with"
" a single :ref:`command <ext_commands_commands>` named ``hello`` as well "
"as a listener to listen to an :ref:`Event <discord-api-events>`."
msgstr "이 예제는 당신의 커맨드에 ``hello`` 라는 이름의 단일 "
":ref:`command <ext_commands_commands>` 와 :ref:`Event <discord-api-events>` "
"를 감지하기 위한 리스너와 함께 ``Greetings`` 카테고리를 정의합니다."

#: ../../ext/commands/cogs.rst:48
msgid "A couple of technical notes to take into consideration:"
msgstr "고려해야 할 몇 가지 기술적 참고 사항:"

#: ../../ext/commands/cogs.rst:50
msgid ""
"All listeners must be explicitly marked via decorator, "
":meth:`~.commands.Cog.listener`."
msgstr "모든 리스너들은 명시적으로 :meth:`~.commands.Cog.listener`"
" 데코레이터를 통해 표시되어야만 합니다."

#: ../../ext/commands/cogs.rst:51
msgid ""
"The name of the cog is automatically derived from the class name but can "
"be overridden. See :ref:`ext_commands_cogs_meta_options`."
msgstr "Cog의 이름은 자동적으로 클래스 이름에서 불러오지만, "
"덮어씌워질 수 있습니다. :ref:`ext_commands_cogs_meta_options` 를 참고하세요."

#: ../../ext/commands/cogs.rst:52
msgid ""
"All commands must now take a ``self`` parameter to allow usage of "
"instance attributes that can be used to maintain state."
msgstr "모든 명령어들은 이제 상태를 유지하는데 사용될 수 있는 인스턴스 속성들을 "
"사용할 수 있게 ``self`` 파라미터를 사용해야 합니디."

#: ../../ext/commands/cogs.rst:55
msgid "Cog Registration"
msgstr "Cog 등록"

#: ../../ext/commands/cogs.rst:57
msgid ""
"Once you have defined your cogs, you need to tell the bot to register the"
" cogs to be used. We do this via the :meth:`~.commands.Bot.add_cog` "
"method."
msgstr ""
"일단 cogs를 정의했다면, 당신은 cogs를 사용하기 위해 봇에게 등록하라고 해야 합니다. "
" 우리는 이것을 :meth:`~.commands.Bot.add_cog` 메소드를 통해 수행합니다."

#: ../../ext/commands/cogs.rst:63
msgid ""
"This binds the cog to the bot, adding all commands and listeners to the "
"bot automatically."
msgstr "이것은 cog를 봇으로 묶으며, 모든 커맨드들과 리스너들은 봇에 자동적으로 "
"추가됩니다."

#: ../../ext/commands/cogs.rst:65
msgid ""
"Note that we reference the cog by name, which we can override through "
":ref:`ext_commands_cogs_meta_options`. So if we ever want to remove the "
"cog eventually, we would have to do the following."
msgstr ""
"우리가 cog를 :ref:`ext_commands_cogs_meta_options` 를 통해 덮어씌울 수 있는 "
"이름으로 참조한다는 것을 명심하세요. 따라서 만약 cog를 제거하고자 한다면 "
"다음과 같이 해야 합니다."

#: ../../ext/commands/cogs.rst:72
msgid "Using Cogs"
msgstr "Cogs 사용하기"

#: ../../ext/commands/cogs.rst:74
msgid ""
"Just as we remove a cog by its name, we can also retrieve it by its name "
"as well. This allows us to use a cog as an inter-command communication "
"protocol to share data. For example:"
msgstr ""
"방금 우리가 cog를 이름으로 제거했듯이, 우린 그것을 이름으로도 검색할 수 있습니다. "
"이는 우리가 cog를 데이터를 공유하기 위한 명령어 내부의 프로토콜로 사용할 수 있게 합니다. "
"예를 들어:"

#: ../../ext/commands/cogs.rst:109
msgid "Special Methods"
msgstr "특별한 메소드"

#: ../../ext/commands/cogs.rst:111
msgid ""
"As cogs get more complicated and have more commands, there comes a point "
"where we want to customise the behaviour of the entire cog or bot."
msgstr "Cogs가 점점 복잡해지고 많은 명령어를 가지면서, cog 또는 봇을 통째로 "
"커스터마이즈 하고 싶을 때가 찾아옵니다."

#: ../../ext/commands/cogs.rst:113
msgid "They are as follows:"
msgstr "이는 다음과 같습니다:"

#: ../../ext/commands/cogs.rst:115
msgid ":meth:`.Cog.cog_unload`"
msgstr ""

#: ../../ext/commands/cogs.rst:116
msgid ":meth:`.Cog.cog_check`"
msgstr ""

#: ../../ext/commands/cogs.rst:117
msgid ":meth:`.Cog.cog_command_error`"
msgstr ""

#: ../../ext/commands/cogs.rst:118
msgid ":meth:`.Cog.cog_before_invoke`"
msgstr ""

#: ../../ext/commands/cogs.rst:119
msgid ":meth:`.Cog.cog_after_invoke`"
msgstr ""

#: ../../ext/commands/cogs.rst:120
msgid ":meth:`.Cog.bot_check`"
msgstr ""

#: ../../ext/commands/cogs.rst:121
msgid ":meth:`.Cog.bot_check_once`"
msgstr ""

#: ../../ext/commands/cogs.rst:123
msgid "You can visit the reference to get more detail."
msgstr "레퍼런스를 방문해 더 자세한 정보를 찾아볼 수 있습니다."

#: ../../ext/commands/cogs.rst:128
msgid "Meta Options"
msgstr "메타 옵션"

#: ../../ext/commands/cogs.rst:130
msgid ""
"At the heart of a cog resides a metaclass, :class:`.commands.CogMeta`, "
"which can take various options to customise some of the behaviour. To do "
"this, we pass keyword arguments to the class definition line. For "
"example, to change the cog name we can pass the ``name`` keyword argument"
" as follows:"
msgstr ""
"Cog의 중심에는 다양한 옵션들과 몇몇 행동을 커스터마이즈 할 수 있는 메타클래스 "
":class:`.commands.CogMeta` 가 있습니다. 이를 수행하기 위해서, 키워드 인자들을 "
"클래스 정의 줄에 전달하세요. 예를 들어, cog의 이름을 바꾸기 위해서는 ``name`` "
"키워드 매개변수를 다음과 같이 전달합니다:"

#: ../../ext/commands/cogs.rst:137
msgid ""
"To see more options that you can set, see the documentation of "
":class:`.commands.CogMeta`."
msgstr ""
"설정할 수 있는 더 많은 옵션을 보시려면, 문서의 :class:`.commands.CogMeta` "
"를 참고해주세요."

#: ../../ext/commands/cogs.rst:140
msgid "Inspection"
msgstr "검사"

#: ../../ext/commands/cogs.rst:142
msgid ""
"Since cogs ultimately are classes, we have some tools to help us inspect "
"certain properties of the cog."
msgstr ""
"Cogs가 궁극적으로 클래스이기 때문에, 우리는 cog의 특정한 속성들을 검사하는데 도움을 "
"주는 몇 가지 도구를 가지고 있습니다."

#: ../../ext/commands/cogs.rst:145
msgid ""
"To get a :class:`list` of commands, we can use :meth:`.Cog.get_commands`."
" ::"
msgstr ""
"커맨드들의 :class:`list` 를 얻기 위해, :meth:`.Cog.get_commands` 를 사용할 수 있습니다."
" ::"

#: ../../ext/commands/cogs.rst:151
msgid ""
"If we want to get the subcommands as well, we can use the "
":meth:`.Cog.walk_commands` generator. ::"
msgstr ""
"만약 서브커맨드들 또한 얻고 싶으면, :meth:`.Cog.walk_commands`"
"제너레이터 사용이 가능합니다. ::"

#: ../../ext/commands/cogs.rst:155
msgid ""
"To do the same with listeners, we can query them with "
":meth:`.Cog.get_listeners`. This returns a list of tuples -- the first "
"element being the listener name and the second one being the actual "
"function itself. ::"
msgstr ""
"리스너들도 이와 같이 얻고 싶으면, :meth:`.Cog.get_listeners` 에서 "
"질의할 수 있습니다."

